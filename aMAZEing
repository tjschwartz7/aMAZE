using System;

namespace aMAZEing
{
    class Program
    {
        static void Main(string[] args)
        {
            Random rand = new Random();
            int size = ((rand.Next(4, 16) * 2) + 1);
            char[,] maze = new char[size,size];
            maze = initMaze(maze, size);
            mazeifyMaze(maze, size);
            connectPaths(maze, size);
            printMaze(maze, size);
            


        }

       public static char[,] initMaze(char[,] maze, int size)
       {
            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    switch(i % 2)
                    {
                        case 0:
                            maze[i, j] = '#';
                            break;
                        case 1:
                            if(j%2==0)
                            {
                                maze[i, j] = '#';
                            }
                            else
                            {
                                maze[i, j] = '+';
                            }

                            break;
                    }
                }
            }

           return maze;
       }

        public static char[,] mazeifyMaze(char[,] maze, int size)
        {
            Random rand = new Random();
            int start = rand.Next(1, size - 2);
            int end = rand.Next(1, size - 2);
            maze[start, 0] = '+'; 
            maze[start, 1] = '+';
            maze[start, size - 1] = '+'; 
            maze[start, size - 2] = '+';
            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
            
                    if (j >= 1 && i < size - 1 && j < size - 1 && maze[i, j] != maze[i + 1, j + 1] && i >= 1 && maze[i, j]
                        != maze[i + 1, j - 1] && i < size - 1 && j < size - 1 && maze[i, j] != maze[i + 1, j + 1] && maze[i, j] != maze[i + 1, j - 1] && 
                        (maze[i,j] != maze[i + 1,j] && maze[i, j] != maze[i - 1, j] && maze[i, j] != maze[i, j + 1] && maze[i, j] != maze[i, j-1]))
                    {
                        int add = rand.Next(-1, 1);
                        int choice = rand.Next(100) % 2;
                        if (i != size - 2)
                        {
                            maze[i + 1, j] = '+';
                        }
                        else maze[i - 1, j] = '+';

                        //switch (choice)
                        //{
                        //  case 0:
                        // if (i == 1) add = 1;
                        // else if (i == size - 1) add = -1;
                        // maze[i + add, j] = '+';
                        // break;
                        // case 1:
                        //if (j == 1) add = 1;
                        // else if (j == size - 1) add = -1;
                        // maze[i, j + add] = '+';
                        //  break;
                        //}

                    }





                }
            }
            return maze;
        }

        public static char[,] connectPaths(char[,] maze, int size)
        {
            Random rand = new Random();

            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    if(i > 1 && j < size - 1 && i < size - 1 && j > 1 && maze[i,j] != maze[i,j+1] && maze[i, j] != maze[i+1, j] && maze[i, j] != maze[i-1, j] && maze[i, j] != maze[i, j-1])
                    {
                        int add = rand.Next(-1, 1);
                        int choice = rand.Next(100) % 2;
                        switch(choice)
                        {
                            case 1:
                                maze[i + add, j] = '+';
                                break;
                            case 0:
                                maze[i, j+add] = '+';
                                break;
                        }
                    }

                    if (i >= 1 && j < size - 1 && i < size - 1 && j > 1 && (maze[i, j] != maze[i + 1, j] || maze[i, j] != maze[i - 1, j]) && rand.Next(100) % 2 == 0 && maze[i, j + 1] == '#' && maze[i, j - 1] != '#')
                    {
                        int add = rand.Next(-1, 1);
                        //Console.Write("ADD: " + add);
                        if (maze[i + 1, j] == '+') add = -1;
                        else if (maze[i - 1, j] == '+') add = 1;

                        if (i == 1) add = 1;
                        else if (i == size - 2) add = -1;
                        maze[i + add, j] = '+';
                    }

                    if (i >= 1 && j < size - 1 && i < size - 1 && j > 1 && (maze[i, j] != maze[i, j + 1] || maze[i, j] != maze[i, j - 1]) && rand.Next(100) % 2 == 0 && maze[i + 1, j] == '#' && maze[i - 1, j] != '#')
                    {
                        int add = rand.Next(-1, 2);
                        if (add == 0) add = 1;
                        //Console.Write("ADD: " + add);
                        if (maze[i, j + 1] == '+') add = -1;
                        else if (maze[i, j - 1] == '+') add = 1;
                            
                        if (j == 1) add = 1;
                        else if (j == size - 2) add = -1;
                        maze[i, j + add] = '+';
                    }



                }
            }

            int oop = 0;
            while (oop++ > 2)
            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    if (i >= 1 && j < size - 1 && i < size - 1 && j > 1 && maze[i, j] != maze[i + 1, j] && maze[i, j] != maze[i - 1, j] && rand.Next(100) % 2 == 0 && maze[i, j+1] == '#' && maze[i, j-1] != '#')
                    {
                        int add = rand.Next(-1, 1);
                        if (i == 1) add = 1;
                        maze[i + add, j] = '+';
                    }

                    if (i >= 1 && j < size - 1 && i < size - 1 && j > 1 && maze[i, j] != maze[i, j + 1] && maze[i, j] != maze[i, j - 1] && rand.Next(100) % 2 == 0 && maze[i + 1, j] == '#' && maze[i - 1, j] != '#')
                    {
                        int add = rand.Next(-1, 1);
                        if (j == 1) add = 1;
                        maze[i, j + add] = '+';
                    }



                }
            }

            return maze;
        }

        public static void connectToStart(char[,] maze, int size)
        {
            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {



                }
            }
        }

        public static void printMaze(char[,] maze, int size)
        {
            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    Console.Write(maze[i, j] + " ");
                }
                Console.WriteLine();
            }

        }

    }
}
